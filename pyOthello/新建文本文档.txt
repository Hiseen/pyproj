def recursive_load(self,data):
        while data:
            f1=data.find(']')
            f2=data.find('{')
            f3=data.find(';')
            t1=data[2:f1-1].split(',')
            key=(int(t1[0]),int(t1[1]))
            if f2!=-1:
                if f3>f2:
                    t2=data[f1+2:f2-1].split(',')
                    self.next_step[key]=MCT_Node(None,float(t2[0]),int(t2[1]),int(t2[2]))
                    data=self.next_step[key].recursive_load(data[f2+1:])
                    if data[0]==';':
                        data=data[1:]
                    elif data[0]=='}':
                        return data[1:]
                else:
                    f4=data.find('}')
                    if f4>f3:
                        t2=data[f1+2:f3-1].split(',')
                        self.next_step[key]=MCT_Node(None,float(t2[0]),int(t2[1]),int(t2[2]))
                        data=data[f3+1:]
                    else:
                        t2=data[f1+2:f4-1].split(',')
                        self.next_step[key]=MCT_Node(None,float(t2[0]),int(t2[1]),int(t2[2]))
                        return data[f4+1:]
            else:
                f4=data.find('}')
                if f4<f3 or f3==-1:
                    t2=data[f1+2:f4-1].split(',')
                    self.next_step[key]=MCT_Node(None,float(t2[0]),int(t2[1]),int(t2[2]))
                    return data[f4+1:]
                else:
                    t2=data[f1+2:f3-1].split(',')
                    self.next_step[key]=MCT_Node(None,float(t2[0]),int(t2[1]),int(t2[2]))
                    if f4+1==len(data):
                        return None
                    data=data[f3+1:]













 def recursive_load(self,data):
        while data.value:
            print(len(data.value))
            f1=data.value.find(b']')
            f2=data.value.find(b'{')
            f3=data.value.find(b';')
            t1=data.value[2:f1-1].split(b',')
            key=(int(t1[0]),int(t1[1]))
            if f2!=-1:
                if f3>f2:
                    t2=data.value[f1+2:f2-1].split(b',')
                    self.next_step[key]=MCT_Node(self,float(t2[0]),int(t2[1]),int(t2[2]))
                    data.value=data.value[f2+1:]
                    self.next_step[key].recursive_load(data)
                    if data[0]==b';':
                        data.value=data.value[1:]
                    elif data[0]==b'}':
                        data.value=data.value[1:]
                        return
                else:
                    f4=data.value.find(b'}')
                    if f4>f3:
                        t2=data.value[f1+2:f3-1].split(b',')
                        self.next_step[key]=MCT_Node(self,float(t2[0]),int(t2[1]),int(t2[2]))
                        data.value=data.value[f3+1:]
                    else:
                        t2=data.value[f1+2:f4-1].split(b',')
                        self.next_step[key]=MCT_Node(self,float(t2[0]),int(t2[1]),int(t2[2]))
                        data.value=data.value[f4+1:]
                        return
            else:
                f4=data.value.find(b'}')
                if f4<f3 or f3==-1:
                    t2=data.value[f1+2:f4-1].split(b',')
                    self.next_step[key]=MCT_Node(self,float(t2[0]),int(t2[1]),int(t2[2]))
                    data.value=data.value[f4+1:]
                    return
                else:
                    t2=data.value[f1+2:f3-1].split(b',')
                    self.next_step[key]=MCT_Node(self,float(t2[0]),int(t2[1]),int(t2[2]))
                    if f4+1==len(data.value):
                        return None
                    data.value=data.value[f3+1:]